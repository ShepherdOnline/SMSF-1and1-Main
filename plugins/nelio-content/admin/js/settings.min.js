/**
 * This file contains some tweaks for the settings page.
 *
 * @author David Aguilera <david.aguilera@neliosoftware.com>
 * @since  1.0.0
 */
(function( $ ) {
	'use strict';

	// --------------------------------------------------------------------------
	// Hide dynamic settings
	// --------------------------------------------------------------------------

	if ( ! NelioContentSettings.isYoastSEOAvailable ) {
		var $yoast = $( '#qa-is-yoast-seo-integrated' );
		$yoast.prop( 'disabled', true );
		$yoast.closest( 'tr' ).find( 'th, td' ).addClass( 'nc-disabled-setting' );
	}//end if

	// --------------------------------------------------------------------------
	// Load relevant models and views
	// --------------------------------------------------------------------------

	// --------------------------------------------------------------------------
	// Hide save button on Social Profiles tab
	// --------------------------------------------------------------------------
	var url = window.location.href;
	if ( /\btab=social-profiles\b/.test( url ) || ! /\btab=/.test( url ) ) {

		/**
		 * This view represents a social profile connected to this website.
		 *
		 * It's supposed to be used as a child view of the SocialProfileSettings view.
		 *
		 * @constructor
		 * @augments Backbone.View
		 *
		 * @since 1.0.0
		 * @author David Aguilera <david.aguilera@neliosoftware.com>
		 */
		NelioContent.views.ConnectedSocialProfile = Backbone.View.extend({
		
			 /**
				* This variable contains the status of the deletion process. Possible values
				* are:
				*
				*  * `none`: the user hasn't click on the `Delete` button.
				*  * `awaiting-confirmation`: the user has clicked on `Delete`, but hasn't confirmed the action.
				*  * `deleting`: the social profile is being deleted.
				*/
			_deletionStatus: 'none',
		
			/**
			 * The classes used in this view's element.
			 */
			className: 'nc-connected-profile',
		
			/**
			 * The underscore template.
			 */
			template: _.template( NelioContent.helpers.trim( document.getElementById( '_nc-connected-social-profile' ).innerHTML ) ),
		
			/**
			 * List of events and their callbacks.
			 */
			events: {
				'mouseleave': '_cancelProfileDeletion',
				'click .nc-delete': '_askForProfileDeletionConfirmation',
				'click .nc-cancel-deletion': '_cancelProfileDeletion',
				'click .nc-do-delete': '_deleteProfile',
				'click .nc-reauthenticate': '_reauthenticateProfile',
				'click .nc-refresh': '_reauthenticateProfile'
			},
		
			/**
			 * Initializes a new instance of this view.
			 *
			 * @since 1.0.0
			 */
			initialize: function() {
		
				// Add listeners.
				this.render = _.bind( this.render, this );
				this.listenTo( this, 'nc:render', this.render );
				this.listenTo( this.model, 'change', this.render );
		
			},//end initialize()
		
			/**
			 * Renders this view.
			 *
			 * @return {Calendar} this instance.
			 *
			 * @since 1.0.0
			 */
			render: function() {
		
				// Render the whole view.
				var data = this.model.toJSON();
				data.deletionStatus = this._deletionStatus;
				data.addedByCurrentUser = this.model.get( 'creatorId' ) === NelioContent.users.current().get( 'id' );
		
				this.el.innerHTML = this.template( data );
		
				this.el.className = this.className;
				if ( 'renew' === this.model.get( 'status' ) ) {
					this.el.className += ' nc-authentication-required';
				}//end if
		
				if ( 'deleting' === this._deletionStatus ) {
					this.el.className += ' nc-deleting';
				}//end if
		
				return this;
		
			},//end render()
		
			/**
			 * Callback function. It asks whether the user really wants to delete the
			 * profile.
			 *
			 * @since 1.0.0
			 */
			_askForProfileDeletionConfirmation: function() {
		
				this._deletionStatus = 'awaiting-confirmation';
				this.trigger( 'nc:render' );
		
				return false;
		
			},//end _askForProfileDeletionConfirmation()
		
			/**
			 * Callback function. It discards the delete profile confirmation message.
			 *
			 * @since 1.0.0
			 */
			_cancelProfileDeletion: function() {
		
				if ( 'awaiting-confirmation' === this._deletionStatus ) {
					this._deletionStatus = 'none';
					this.trigger( 'nc:render' );
				}//end if
		
				return false;
		
			},//end _cancelProfileDeletion()
		
			/**
			 * Callback function. It deletes the profile.
			 *
			 * @since 1.0.0
			 */
			_deleteProfile: function( ev ) {
		
				this._deletionStatus = 'deleting';
				this.trigger( 'nc:render' );
				this.model.destroy();
		
				return false;
		
			},//end _deleteProfile()
		
			/**
			 * Callback function for re-authenticating the profile.
			 *
			 * @param ev {object} The JavaScript event that triggered the callback.
			 *
			 * @since 1.0.0
			 */
			_reauthenticateProfile: function( ev ) {
		
				var target = ev.target || ev.srcElement;
				var $el = $( target );
		
				var url = $el.data( 'href' );
				NelioContent.helpers.openPopup( url, 640, 480 );
		
				return false;
		
			},//end _reauthenticateProfile()
		
			/**
			 * This function disposes the view, unbinding all events and removing it from the DOM.
			 *
			 * If things work as expected, there should be no memory leaks.
			 *
			 * @since 1.0.0
			 */
			close: function() {
		
				// We remove the element from the DOM and unbind all events it was
				// attached to.
				this.stopListening();
				this.unbind();
				if ( typeof this.el !== 'undefined' ) {
					this.remove();
					this.el = undefined;
					this.$el = undefined;
				}//end if
		
			}//end close()
		
		});//class ConnectedSocialProfile
		
		
		/**
		 * A view for configuring the social profiles that will be available in the
		 * plugin. It's used in the settings page.
		 *
		 * @constructor
		 * @augments Backbone.View
		 *
		 * @since 1.0.0
		 * @author David Aguilera <david.aguilera@neliosoftware.com>
		 */
		NelioContent.views.SocialProfileSettings = Backbone.View.extend({
		
			/**
			 * A list of child views for rendering each social profile.
			 */
			_profileViews: [],
		
			/**
			 * The underscore template of this view.
			 */
			template: _.template( NelioContent.helpers.trim( document.getElementById( '_nc-social-profile-settings' ).innerHTML ) ),
		
			/**
			 * List of events and their callbacks.
			 */
			events: {
				'click .nc-network .nc-logo': '_addSocialProfile'
			},
		
			/**
			 * Initializes a new instance of this view.
			 *
			 * @since 1.0.0
			 */
			initialize: function() {
		
				if ( typeof this.collection === 'undefined' ) {
					this.collection = new NelioContent.collections.ConnectedSocialProfiles();
				}//end if
		
				this.collection.each( function( item ) {
					var view = new NelioContent.views.ConnectedSocialProfile({ model : item });
					this._profileViews.push( view );
				}, this );
		
				// Add listeners.
				this.render = _.bind( this.render, this );
		
				this.listenTo( this.collection, 'reset', this._resetSocialProfileViews );
				this.listenTo( this.collection, 'reset', this.render );
		
				this.listenTo( this.collection, 'add', this._addSocialProfileView );
				this.listenTo( this.collection, 'add', this.render );
		
				this.listenTo( this.collection, 'remove', this._removeProfileView );
				this.listenTo( this.collection, 'remove', this.render );
		
			},//end initialize()
		
			/**
			 * Renders this view.
			 *
			 * @return {Calendar} this instance.
			 *
			 * @since 1.0.0
			 */
			render: function() {
		
				// Initializing some variables required for the template.
				var data = {
					isTwitterEnabled: true,
					isFacebookEnabled: true,
					isLinkedInEnabled: true,
					isPinterestEnabled: true,
					maxNumOfProfiles: ( NelioContent.limits.maxProfiles > 0 ) ? NelioContent.limits.maxProfiles : 4,
					isLoadingSocialProfiles: ! NelioContent.profiles.isReady(),
					numOfConnectedProfiles: this.collection.length
				};
		
				// Disable social networks when required.
				if ( NelioContent.limits.maxProfilesPerNetwork > 0 ) {
		
					var limit = NelioContent.limits.maxProfilesPerNetwork;
		
					if ( NelioContent.profiles.where({ network: 'twitter' }).length >= limit ) {
						data.isTwitterEnabled = false;
					}//end if
		
					if ( NelioContent.profiles.where({ network: 'facebook' }).length >= limit ) {
						data.isFacebookEnabled = false;
					}//end if
		
					if ( NelioContent.profiles.where({ network: 'linkedin' }).length >= limit ) {
						data.isLinkedInEnabled = false;
					}//end if
		
					if ( NelioContent.profiles.where({ network: 'pinterest' }).length >= limit ) {
						data.isPinterestEnabled = false;
					}//end if
		
				}//end if
		
				if ( NelioContent.limits.maxProfiles > 0 && NelioContent.profiles.length >= NelioContent.limits.maxProfiles ) {
		
					data.isTwitterEnabled = false;
					data.isFacebookEnabled = false;
					data.isLinkedInEnabled = false;
					data.isPinterestEnabled = false;
		
				}//end if
		
				// Build the skeletton.
				this.el.innerHTML = this.template( data );
				this._rendered = this.collection.length !== 0;
		
				// Render social media profiles.
				var $connectedProfiles = this.$( '.nc-connected-profiles' );
				$connectedProfiles.children().detach();
				_.each( this._profileViews, function( cp ) {
					$connectedProfiles.append( cp.render().el );
				}, this );
		
				return this;
		
			},//end render()
		
			/**
			 * A callback function for adding a social profile.
			 *
			 * @param ev {object} The JavaScript event that triggered the callback.
			 *
			 * @since 1.0.0
			 */
			_addSocialProfile: function( ev ) {
		
				var el = ev.target || ev.srcElement;
				var $el = $( el );
		
				var url = $el.closest( '.nc-network' ).data( 'href' );
		
				NelioContent.helpers.openPopup( url, 640, 480 );
		
			},//end _addSocialProfile
		
			/**
			 * Creates a new child view for rendering the given profile.
			 *
			 * @param profile {SocialProfile} The new social profile that we just added
			 *                                to the collection associated to this view.
			 *
			 * @since 1.0.0
			 */
			_addSocialProfileView: function( profile ) {
		
				// Prepare the new child view for this profile.
				var view = new NelioContent.views.ConnectedSocialProfile({ model : profile });
				this._profileViews.push( view );
		
			},//end _addSocialProfileView()
		
			/**
			 * Looks for the view related to the given profile and closes it.
			 *
			 * @param profile {ProfileView} the profile whose view has to be closed.
			 *
			 * @since 1.0.0
			 */
			_removeProfileView: function( profile ) {
		
				// Find the view to remove.
				var views = _.filter( this._profileViews, function( candidate ) {
					return candidate.model === profile;
				}, this );
		
				// And remove it.
				if ( views.length > 0 ) {
					var view = views[0];
					this._profileViews = _.without( this._profileViews, view );
					this.stopListening( view );
					view.close();
				}//end if
		
			},//end _removeProfileView()
		
			/**
			 * A callback function invoked when resetting this view's collection.
			 *
			 * It removes old child views and creates a new set of child views.
			 *
			 * @since 1.0.0
			 */
			_resetSocialProfileViews: function() {
		
				// Remove old views (if any).
				_.each( this._profileViews, function( view ) {
					view.close();
				}, this );
				this._profileViews = [];
		
				// Create new views.
				this.collection.each( function( profile ) {
					var view = new NelioContent.views.ConnectedSocialProfile({ model : profile });
					this._profileViews.push( view );
				}, this );
		
				// Sort profiles in inversed cronological order.
				this._profileViews.sort( function( viewA, viewB ) {
					var a = viewA.model.get( 'creationDate' );
					var b = viewB.model.get( 'creationDate' );
					if ( b.isBefore( a ) ) {
						return -1;
					} else if ( b.isAfter( a ) ) {
						return 1;
					} else {
						return 0;
					}//end if
				});
		
			},//end _resetSocialProfileViews()
		
			/**
			 * This function disposes the view, unbinding all events and removing it from the DOM.
			 *
			 * If things work as expected, there should be no memory leaks.
			 *
			 * @since 1.0.0
			 */
			close: function() {
		
				// Remove all child views.
				_.each( this._profileViews, function( view ) {
					view.close();
				}, this );
				this._profileViews = [];
		
				// We remove the element from the DOM and unbind all events it was
				// attached to.
				this.stopListening();
				this.unbind();
				if ( typeof this.el !== 'undefined' ) {
					this.remove();
					this.el = undefined;
					this.$el = undefined;
				}//end if
		
			}//end close()
		
		});//class SocialProfileSettings
		
		

		$( '#submit' ).hide();

		var view = new NelioContent.views.SocialProfileSettings({ collection : NelioContent.profiles });
		var $container = $( '#social-profile-settings-container' );
		$container.html( view.render().el );

		NelioContent.fn = NelioContent.fn || {};

	}//end if

})( jQuery );
