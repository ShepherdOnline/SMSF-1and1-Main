/**
 * This file kicks off the featured image dialog.
 *
 * @author David Aguilera <david.aguilera@neliosoftware.com>
 * @since  1.1.1
 */
(function( $ ) {

	'use strict';

	/**
	 * Backbone model that represents a featured image.
	 *
	 * @constructor
	 * @augments Backbone.Model
	 *
	 * @author David Aguilera <david.aguilera@neliosoftware.com>
	 * @since 1.1.1
	 */
	NelioContent.models.FeaturedImage = Backbone.Model.extend({
	
		/**
		 * JavaScript Image object used for checking if a certain URL points to an
		 * image.
		 */
		_img: undefined,
	
		/**
		 * Default values.
		 */
		defaults: {
	
			alt: '',
	
			thumbnailId: 0,
			url: '',
	
			temporalUrl: '',
			checkingUrl: false,
			isUrlValid: false,
	
			mode: 'none'
	
		},
	
		/**
		 * Initializes this object.
		 *
		 * @since 1.1.1
		 */
		initialize: function() {
	
			this._checkTemporalUrl = _.bind( this._checkTemporalUrl, this );
			this._commitTemporalUrl = _.bind( this._commitTemporalUrl, this );
			this._discardTemporalUrl = _.bind( this._discardTemporalUrl, this );
	
			this.set( 'temporalUrl', this.get( 'url' ) );
			this.listenTo( this, 'change:temporalUrl', _.debounce( this._checkTemporalUrl, 200 ) );
			this._checkTemporalUrl();
	
		},//end initialize()
	
		/**
		 * Callback function that checks if the current temporal URL points to an
		 * image or not.
		 *
		 * This check is performed asynchronously. When the URL is valid,
		 * `_commitTemporalUrl` is called. Otherwise, `_discardTemporalUrl` is.
		 *
		 * @since 1.1.1
		 */
		_checkTemporalUrl: function() {
	
			if ( typeof this._img !== 'undefined' ) {
				this._img.onload = false;
				this._img.onerror = false;
			}
	
			this.set( 'checkingUrl', true );
			this._img = new Image();
			this._img.onload = this._commitTemporalUrl;
			this._img.onerror = this._discardTemporalUrl;
			this._img.src = this.get( 'temporalUrl' );
	
		},//end _checkTemporalUrl()
	
		/**
		 * This helper function copies the temporalUrl into URL and sets it as an
		 * invalid link.
		 *
		 * @since 1.1.1
		 */
		_commitTemporalUrl: function() {
	
			this.set( 'checkingUrl', false );
			this.set( 'url', this.get( 'temporalUrl' ) );
			this.set( 'isUrlValid', true );
	
		},//end _commitTemporalUrl()
	
		/**
		 * This helper function copies the temporalUrl into URL and sets it as a
		 * valid link.
		 *
		 * @since 1.1.1
		 */
		_discardTemporalUrl: function() {
	
			this.set( 'checkingUrl', false );
			this.set( 'url', this.get( 'temporalUrl' ) );
			this.set( 'isUrlValid', false );
	
		}//end _discardTemporalUrl()
	
	});//end class
	
	
	/**
	 * A dialog for editing some information of a post in the calendar page.
	 *
	 * @constructor
	 * @augments Backbone.View
	 *
	 * @since 1.1.1
	 * @author David Aguilera <david.aguilera@neliosoftware.com>
	 */
	NelioContent.views.ExternalFeaturedImageDialog = Backbone.View.extend({
	
		/**
		 * An object with a reference to all dialog buttons.
		 */
		_buttons: undefined,
	
		/**
		 *
		 */
		_regex: {
			url: /^(https?:\/\/)?([\da-z\.-]+)\.([a-z]{2,6})(\/[^\/\s]+)*\/?$/i,
			date: /[12][0-9][0-9][0-9]-[01][0-9]-[0-3][0-9]/,
			time: /[012][0-9]:[0-5][0-9]/
		},
	
		/**
		 * Original model.
		 */
		_originalModel: undefined,
	
		/**
		 * The underscore template.
		 */
		template: _.template( NelioContent.helpers.trim( document.getElementById( '_nc-external-featured-image-dialog' ).innerHTML ) ),
	
		/**
		 * List of events and their callbacks.
		 */
		events: {
	
			'change .nc-url input': '_onUrlChange',
			'keyup .nc-url input': '_onUrlChange',
	
			'change .nc-alt input': '_onAltChange',
			'keyup .nc-alt input': '_onAltChange'
	
		},
	
		/**
		 * Initializes a new instance of this view.
		 *
		 * @param options {object} Options that can be attached to the view.
		 *
		 * @since 1.1.1
		 */
		initialize: function() {
	
			// Add some bindings.
			this.render = _.bind( this.render, this );
			this._onDialogSave = _.bind( this._onDialogSave, this );
			this._onDialogCancel = _.bind( this._onDialogCancel, this );
	
			// Listen to relevant events.
			this.listenTo( this, 'nc:render', this.render );
	
			this._originalModel = this.model;
			if ( this.model.get( 'mode' ) === 'efi' ) {
				this.model = new NelioContent.models.FeaturedImage( this.model.toJSON() );
			} else {
				this.model = new NelioContent.models.FeaturedImage();
				this.model.set( 'mode', 'efi' );
			}//end if
	
			this.listenTo( this.model, 'change:url', this._maybeEnableSaveButton );
			this.listenTo( this.model, 'change:alt', this._maybeEnableSaveButton );
			this.listenTo( this.model, 'change:checkingUrl', this._maybeShowSpinner );
	
			this.listenTo( this.model, 'change:url', this._maybeShowPreview );
			this.listenTo( this.model, 'change:isUrlValid', this._maybeShowPreview );
			this.listenTo( this.model, 'change:isUrlValid', this._maybeEnableSaveButton );
	
			this._convertToDialog();
	
		},//end initialize()
	
		/**
		 * Opens the dialog and renders this view.
		 *
		 * @return {ExternalFeaturedImageDialog} this instance.
		 *
		 * @since 1.1.1
		 */
		render: function() {
	
			this.el.innerHTML = this.template( this.model.toJSON() );
	
			$( 'body' ).addClass( 'modal-open' );
			this.$el.dialogS2( 'open' );
	
			this._maybeShowSpinner();
			this._maybeShowPreview();
			this._maybeEnableSaveButton();
	
			return this;
	
		},//end render()
	
		/**
		 * Locks all inputs, so that the user cannot interact with the view
		 * (presumably, whilst saving).
		 *
		 * @since 1.1.1
		 */
		_lock: function() {
	
			this.$( '*' ).attr( 'disabled', 'disabled' );
			this.$el.addClass( 'nc-locked' );
	
		},//end _lock()
	
		/**
		 * Unlocks all inputs, so that the user can interact with the view.
		 * Presumably, this function is called after an unsuccessful saving
		 * attempt.
		 *
		 * @since 1.1.1
		 */
		_unlock: function() {
	
			this.$( '*' ).removeAttr( 'disabled' );
			this.$el.removeClass( 'nc-locked' );
	
		},//end _unlock()
	
		/**
		 * Converts this view in a jQuery dialog.
		 *
		 * @since 1.1.1
		 */
		_convertToDialog: function() {
	
			// Create buttons.
			var buttons = [];
	
			buttons.push(
				NelioContent.helpers.makeDialogCancelButton( this, NelioContent.i18n.actions.cancel )
			);
			buttons.push(
				NelioContent.helpers.makeDialogSaveButton( this, NelioContent.i18n.actions.save )
			);
	
			// Prepare the dialog.
			var view = this;
			this.$el.dialogS2({
	
				title: NelioContent.i18n.titles.externalFeaturedImage,
				autoOpen: false,
				buttons: buttons,
				dialogClass: 'nc-external-featured-dialog',
				draggable: false,
				modal: true,
				resizable: false,
	
				width: $( window ).width() - 40,
				height: $( window ).height() - 60,
	
				/**
				 * Opens the dialog and listens to the events triggered by its buttons.
				 *
				 * @since 1.1.1
				 */
				open: function() {
	
					// Listen to dialog button events.
					view.listenTo( view, 'nc:click:dialog:save', view._onDialogSave );
					view.listenTo( view, 'nc:click:dialog:cancel', view._onDialogCancel );
					view.listenTo( view, 'nc:click:dialog:close', view._onDialogCancel );
	
					// Prepare beautiful tooltips for save button.
					view._buttons = view._buttons || {};
	
					view._buttons.close = view.$el.parent().find( 'button.nc-close-button' );
					view._buttons.cancel = view.$el.parent().find( 'button.nc-cancel-button' );
					view._buttons.save = view.$el.parent().find( 'button.nc-save-button' );
	
					NelioContent.helpers.makeWarningTooltip( view._buttons.save );
	
				},//end open()
	
				/**
				 * Destroys the dialog and triggers the `nc:close:dialog` event.
				 *
				 * @since 1.1.1
				 */
				close: function( event, ui ) {
	
					// Stop listening to dialog buttons, now that the dialog is about to be closed.
					view.stopListening( view, 'nc:click:dialog:save', view._onDialogSave );
					view.stopListening( view, 'nc:click:dialog:cancel', view._onDialogCancel );
					view.stopListening( view, 'nc:click:dialog:close', view._onDialogDelete );
	
					// Remove beautiful tooltips for save button.
					view._buttons.save.tooltip( 'destroy' );
	
					$( 'body' ).removeClass( 'modal-open' );
	
					// Destroy the dialog.
					view.$el.dialogS2( 'destroy' );
					view.trigger( 'nc:close:dialog' );
	
				}//end open()
	
			});
	
		},//end _convertToDialog()
	
		/**
		 * A callback function that shows a spinner when the URL is being checked.
		 *
		 * @since 1.1.1
		 */
		_maybeShowSpinner: function() {
	
			if ( this.model.get( 'checkingUrl' ) ) {
				this.$( '.spinner' ).addClass( 'is-active' );
			} else {
				this.$( '.spinner' ).removeClass( 'is-active' );
			}//end if
	
		},//end _maybeShowSpinner()
	
		/**
		 * A callback function that that shows the featured image in the dialog, but
		 * only if the given URL is actually linking to a valid image.
		 *
		 * @since 1.1.1
		 */
		_maybeShowPreview: function() {
	
			if ( this.model.get( 'isUrlValid' ) ) {
				this.$( '.nc-image img' ).attr( 'src', this.model.get( 'url' ) );
				this.$( '.nc-image' ).show();
			} else {
				this.$( '.nc-image' ).hide();
			}//end if
	
		},//end _maybeShowPreview()
	
		/**
		 * A callback function that enables or disables the save post button,
		 * depending on whether the model can be saved or not.
		 *
		 * @since 1.1.1
		 */
		_maybeEnableSaveButton: function() {
	
			if ( typeof this._buttons.save === 'undefined' ) {
				return;
			}//end if
	
			this._buttons.save.tooltip( 'close' );
	
			if ( this.model.get( 'url' ).length === 0 ) {
	
				if ( ! this._regex.url.test( this._suggestedReference ) ) {
					this._buttons.save.addClass( 'button-disabled' );
					this._buttons.save.attr( 'title', NelioContent.i18n.errors.featuredImage.emptyUrl );
					return;
				}//end if
	
			}//end if
	
			if ( ! this._regex.url.test( this.model.get( 'url' ) ) ) {
				this._buttons.save.addClass( 'button-disabled' );
				this._buttons.save.attr( 'title', NelioContent.i18n.errors.featuredImage.invalidUrl );
				return;
			}//end if
	
			if ( ! this.model.get( 'isUrlValid' ) ) {
				this._buttons.save.addClass( 'button-disabled' );
				this._buttons.save.attr( 'title', NelioContent.i18n.errors.featuredImage.unableToLoadUrl );
				return;
			}//end if
	
			this._buttons.save.removeClass( 'button-disabled' );
			this._buttons.save.attr( 'title', '' );
	
		},//end _maybeEnableSaveButton()
	
		/**
		 * Callback for updating the URL of the featured image.
		 *
		 * @param ev {object} The JavaScript event that triggered the callback.
		 *
		 * @since 1.1.1
		 */
		_onUrlChange: function( ev ) {
	
			var target = ev.target || ev.srcElement;
			var $el = $( target );
			this.model.set( 'temporalUrl', NelioContent.helpers.trim( $el.val() ) );
	
		},//end _onUrlChange()
	
		/**
		 * Callback for updating the ALT attribute of the featured image.
		 *
		 * @param ev {object} The JavaScript event that triggered the callback.
		 *
		 * @since 1.1.0
		 */
		_onAltChange: function( ev ) {
	
			var target = ev.target || ev.srcElement;
			var $el = $( target );
			this.model.set( 'alt', $el.val() );
	
		},//end _onAltChange()
	
		/**
		 * Callback function that saves the post.
		 *
		 * @since 1.1.1
		 */
		_onDialogSave: function() {
	
			var $dialog = this.$el.parent();
			var $okButton = $dialog.find( '.ui-dialog-buttonpane button.nc-save-button' );
			var $otherButtons = $dialog.find( '.ui-dialog-titlebar button, .ui-dialog-buttonpane button:not( .nc-save-button )' );
	
			if ( $okButton.hasClass( 'button-disabled' ) ) {
				return;
			}//end if
	
			this._originalModel.set( this.model.toJSON() );
			this.$el.dialogS2( 'close' );
	
		},//end _onDialogSave()
	
		/**
		 * Callback function that closes the dialog.
		 *
		 * @since 1.1.1
		 */
		_onDialogCancel: function() {
	
			this.$el.dialogS2( 'close' );
	
		},//end _onDialogCancel()
	
		/**
		 * This function disposes the view, unbinding all events and removing it from the DOM.
		 *
		 * If things work as expected, there should be no memory leaks.
		 *
		 * @since 1.1.1
		 */
		close: function() {
	
			// We remove the element from the DOM and unbind all events it was
			// attached to.
			this.stopListening();
			this.unbind();
			if ( typeof this.el !== 'undefined' ) {
				this.remove();
				this.el = undefined;
				this.$el = undefined;
			}//end if
	
		}//end close()
	
	});//class PostEditor
	
	
	/**
	 * This view represents the featured image meta box.
	 *
	 * @constructor
	 * @augments Backbone.View
	 *
	 * @since 1.1.1
	 * @author David Aguilera <david.aguilera@neliosoftware.com>
	 */
	NelioContent.views.FeaturedImage = Backbone.View.extend({
	
		/**
		 * An underscore template with the Meta Box template.
		 */
		template: _.template( NelioContent.helpers.trim( document.getElementById( '_nc-featured-image' ).innerHTML ) ),
	
		/**
		 * List of events.
		 */
		events: {
	
			'click .nc-set-wp': '_openMediaLibrarySelector',
			'click .nc-set-efi': '_openExternalImageDialog',
	
			'click .nc-edit-wp': '_openMediaLibrarySelector',
			'click .nc-edit-efi': '_openExternalImageDialog',
	
			'click .nc-remove-featured-image': '_removeFeaturedImage'
	
		},
	
		/**
		 * Initializes a new instance of this view.
		 *
		 * @since 1.1.1
		 */
		initialize: function() {
	
			// Add listeners.
			this.render = _.bind( this.render, this );
			this.listenTo( this.model, 'change', this.render );
	
		},//end initialize()
	
		/**
		 * Renders this view.
		 *
		 * @return {FeaturedImage} this instance.
		 *
		 * @since 1.1.1
		 */
		render: function() {
	
			this.el.innerHTML = this.template( this.model.toJSON() );
	
			return this;
	
		},//end render()
	
		/**
		 * Renders this view.
		 *
		 * @param ev {object} The JavaScript event that triggered the callback.
		 *
		 * @since 1.1.1
		 */
		_removeFeaturedImage: function( ev ) {
	
			ev.preventDefault();
	
			this.model.set({
				thumbnailId: 0,
				url: '',
				alt: '',
				mode: 'none'
			});
	
		},//end _removeFeaturedImage()
	
		/**
		 * Renders this view.
		 *
		 * @param ev {object} The JavaScript event that triggered the callback.
		 *
		 * @since 1.1.1
		 */
		_openMediaLibrarySelector: function( ev ) {
	
			ev.preventDefault();
	
			var image;
			if ( 'wp' === this.model.get( 'mode' ) && this.model.get( 'thumbnailId' ) ) {
				image = this.model.get( 'thumbnailId' );
			}//end if
	
			var model = this.model;
			NelioContent.helpers.selectImage({
	
				/**
				 * Image selected by default.
				 */
				image: image,
	
				/**
				 * Callback function that updates the featured image.
				 *
				 * @param image {object} the selected image, as returned from wp.media.
				 *
				 * @since 1.0.0
				 */
				onSelection: function( image ) {
	
					// Update the model.
					model.set( 'url', image.url );
					model.set( 'alt', image.alt );
					model.set( 'thumbnailId', image.id );
					model.set( 'mode', 'wp' );
	
				}//end onSelection()
	
			});
	
		},//end _openMediaLibrarySelector()
	
		/**
		 * Renders this view.
		 *
		 * @param ev {object} The JavaScript event that triggered the callback.
		 *
		 * @since 1.1.1
		 */
		_openExternalImageDialog: function( ev ) {
	
			ev.preventDefault();
	
			var v = new NelioContent.views.ExternalFeaturedImageDialog({ model: this.model });
			v.render();
	
		},//end _openExternalImageDialog()
	
		/**
		 * This function disposes the view, unbinding all events and removing it from the DOM.
		 *
		 * If things work as expected, there should be no memory leaks.
		 *
		 * @since 1.1.1
		 */
		close: function() {
	
			// Clear timeout.
			if ( this._discardPendingTimeout > 0 ) {
				clearTimeout( this._discardPendingTimeout );
				this._discardPendingTimeout = 0;
			}//end if
	
			// We remove the element from the DOM and unbind all events it was
			// attached to.
			this.stopListening();
			this.unbind();
			if ( typeof this.el !== 'undefined' ) {
				this.remove();
				this.el = undefined;
				this.$el = undefined;
			}//end if
	
		}//end close()
	
	});//class FeaturedImage
	
	

	var model = new NelioContent.models.FeaturedImage({
		mode: $( '#nc-feat-image-mode' ).val(),
		url: $( '#nc-feat-image-url' ).val(),
		alt: $( '#nc-feat-image-alt' ).val(),
		thumbnailId: $( '#nc-feat-image-thumbnail-id' ).val()
	});
	var view = new NelioContent.views.FeaturedImage({
		model: model
	});

	var $container = $( '#nc-featured-image-container' );
	$container.html( view.render().el );

	model.listenTo( model, 'change:url', function() {
		Backbone.trigger( 'nc:change:featuredImage', model );
	});

})( jQuery );
