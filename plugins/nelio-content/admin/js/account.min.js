/**
 * This script initializes the account view.
 *
 * @author David Aguilera <david.aguilera@neliosoftware.com>
 * @since  1.0.0
 */
(function( $ ) {
	'use strict';

	// --------------------------------------------------------------------------
	// Load relevant views required for this page.
	// --------------------------------------------------------------------------
	/**
	 * Backbone model of an account (which might be related to a free user or a
	 * paying customer).
	 *
	 * @constructor
	 * @augments Backbone.Model
	 *
	 * @author David Aguilera <david.aguilera@neliosoftware.com>
	 * @since 1.0.0
	 */
	NelioContent.models.Account = Backbone.Model.extend({
	
		/**
		 * Default values.
		 */
		defaults: {
	
			// Helper Information.
			isLoading: false,
			error: false,
	
			// Basic Information.
			creationDate: '',
			email: '',
			firstname: '',
			lastname: '',
			fullname: '',
			fullnameFormatted: '',
			photo: '',
	
			// Subscription Details.
			license: '',
			nextChargeDate: '',
			nextChargeTotal: '',
			period: 'none',
			subscription: 'none',
			state: 'active',
	
			// Invoices (it's easier if they're an attribute).
			invoices: undefined,
			errorLoadingInvoices: false
	
		},
	
		/**
		 * Initializes this model.
		 *
		 * @since 1.0.0
		 */
		initialize: function() {
	
			this.listenTo( this, 'change:firstname', this._setFullname );
			this.listenTo( this, 'change:lastname', this._setFullname );
			this._setFullname();
	
			this.listenTo( this, 'change:fullname', this._setFirstLetter );
			this._setFirstLetter();
	
			this.listenTo( this, 'change:fullname', this._formatFullname );
			this._formatFullname();
	
			this.listenTo( this, 'change:nextChargeDate', this._fixNextChargeDateFormat );
			this._fixNextChargeDateFormat();
	
			this.listenTo( this, 'change:creationDate', this._fixCreationDateFormat );
			this._fixCreationDateFormat();
	
		},//end initialize()
	
		/**
		 * Loads the account information from WordPress.
		 *
		 * @since 1.0.0
		 */
		load: function() {
	
			// Mark the model as loading.
			this.set( 'isLoading', true );
	
			// Load the model from WordPress.
			var model = this;
			$.ajax({
	
				url: ajaxurl,
	
				data: {
					action: 'nelio_content_get_account'
				},
	
				success: function( result ) {
	
					model.set( result );
					model.set( 'error', false );
					model.set( 'isLoading', false );
	
					// Load invoices.
					model.resetInvoices();
	
				},//end success();
	
				error: function( xhr ) {
					model.set( 'error', xhr.responseJSON );
					model.set( 'isLoading', false );
				}//end error()
	
			});
	
		},//end load()
	
		/**
		 * Refreshes the invoice list by requesting them to AWS.
		 *
		 * @since 1.0.0
		 */
		resetInvoices: function() {
	
			this.set( 'invoices', undefined );
			this.set( 'errorLoadingInvoices', false );
	
			if ( this.get( 'isInvitation' ) ) {
				return;
			}//end if
	
			var model = this;
			$.ajax({
	
				url: NelioContent.apiUri + '/subscription/invoices',
				method: 'GET',
				headers: { Authorization: 'Bearer ' + NelioContent.apiAuthToken },
	
				success: function( result ) {
					model.set( 'errorLoadingInvoices', false );
					model.set( 'invoices', result );
				},//end success();
	
				error: function( xhr ) {
					model.set( 'errorLoadingInvoices', true );
					model.set( 'invoices', [] );
				}//end error()
	
			});
	
		},//end resetInvoices()
	
		/**
		 * Callback function that sets the fullname of this account as a composition
		 * of the first and last names.
		 *
		 * @since 1.0.0
		 */
		_setFullname: function() {
	
			var firstname = NelioContent.helpers.trim( this.get( 'firstname' ) );
			var lastname = NelioContent.helpers.trim( this.get( 'lastname' ) );
	
			if ( firstname.length > 0 && lastname.length > 0 ) {
				var fullname = NelioContent.i18n.fullnameFormat;
				fullname = fullname.replace( '{firstname}', firstname );
				fullname = fullname.replace( '{lastname}', lastname );
				this.set( 'fullname', fullname );
			} else if ( firstname.length > 0 && lastname.length === 0 ) {
				this.set( 'fullname', firstname );
			} else if ( firstname.length === 0 && lastname.length > 0 ) {
				this.set( 'fullname', lastname );
			} else {
				this.set( 'fullname', NelioContent.i18n.unknownUserName );
			}//end if
	
		},//end _setFullname()
	
		/**
		 * Callback function that escapes the fullname attribute and saves it to
		 * `fullnameFormatted`.
		 *
		 * @since 1.0.0
		 */
		_formatFullname: function() {
	
			this.set( 'fullnameFormatted', _.escape( this.get( 'fullname' ) ) );
	
		},//end _formatFullname()
	
		/**
		 * Callback function that updates the first letter attribute of this
		 * instance, based on the first letter of its name.
		 *
		 * @since 1.0.0
		 */
		_setFirstLetter: function() {
	
			var fullname = this.get( 'fullname' );
			if ( fullname === NelioContent.i18n.unknownUserName ) {
				fullname = '';
			}//end if
	
			this.set( 'firstLetter', NelioContent.helpers.extractFirstLetter( fullname ) );
	
		},//end _setFirstLetter()
	
		/**
		 * Callback to ensure that next charge date is an instance of moment (instead of a string).
		 *
		 * @since 1.0.0
		 */
		_fixNextChargeDateFormat: function() {
	
			var nextChargeDate = this.get( 'nextChargeDate' );
	
			if ( typeof nextChargeDate === 'string' ) {
	
				if ( NelioContent.helpers.trim( nextChargeDate ) !== '' ) {
					this.set( 'nextChargeDate', ncNewLocalMoment( nextChargeDate ) );
				} else {
					this.set( 'nextChargeDate', ncNewLocalMoment() );
				}//end if
	
			}//end if
	
		},//end _fixNextChargeDateFormat()
	
		/**
		 * Callback to ensure that creation date is an instance of moment (instead of a string).
		 *
		 * @since 1.0.0
		 */
		_fixCreationDateFormat: function() {
	
			var creationDate = this.get( 'creationDate' );
	
			if ( typeof creationDate === 'string' ) {
				this.set( 'creationDate', ncNewLocalMoment( creationDate ) );
			}//end if
	
		}//end _fixCreationDateFormat()
	
	});//end class
	
	
	/**
	 * Backbone model that represents a Fastspring product.
	 *
	 * @constructor
	 * @augments NelioContent.models.Model
	 *
	 * @author David Aguilera <david.aguilera@neliosoftware.com>
	 * @since 1.0.0
	 */
	NelioContent.models.FastspringProduct = NelioContent.models.Model.extend({
	
		/**
		 * Default values.
		 */
		defaults: {
	
			name: '',
			longDescription: '',
			shortDescription: '',
	
			plan: '',
			period: 'monthly',
			currency: '',
			price: ''
	
		},
	
		/**
		 * Returns whether the given account's subscription can be upgraded to this
		 * product or not.
		 *
		 * @param account {object} an account that may or may not have an active
		 *                         subscription.
		 *
		 * @return {boolean} whether the given account can be upgraded to the given
		 *                   package or not.
		 *
		 * @since 1.0.0
		 */
		canBeUpgradedFrom: function( account ) {
	
			// If I'm on an annual plan, I can't upgrade to a monthly plan.
			if ( 'yearly' === account.get( 'period' ) && 'monthly' === this.get( 'period' ) ) {
				return false;
			}//end if
	
			if ( 'personal-plan' === account.get( 'subscription' ) && 'yearly' === account.get( 'period' ) ) {
				return 'nelio-content-team-yearly' === this.get( 'id' );
			}//end if
	
			// If we're on the personal plan...
			if ( 'personal-plan' === account.get( 'subscription' ) ) {
	
				// We can upgrade to any annual plan.
				if ( 'yearly' === this.get( 'period' ) ) {
					return true;
				}//end if
	
				// And we can upgrade to any team plan.
				if ( 'team' === this.get( 'plan' ) ) {
					return true;
				}//end if
	
			}//end if
	
			// If we're on the team plan, we can only upgrade from monthly to yearly.
			if ( 'team-plan' === account.get( 'subscription' ) && 'monthly' === account.get( 'period' ) ) {
				return 'nelio-content-team-yearly' === this.get( 'id' );
			}//end if
	
			// Otherwise, we can't upgrade.
			return false;
	
		},//end canBeUpgradedFrom()
	
		/**
		 * Converts a Fastspring product (as returned by AWS) into this Backbone model.
		 *
		 * @param data {object} A Fastspring product, as returned by AWS.
		 *
		 * @since 1.0.0
		 */
		parse: function( data ) {
	
			// Get locale.
			var locale = NelioContent.i18n.locale.toLowerCase().replace( '_', '-' );
			if ( locale.indexOf( '-' ) > 0 ) {
				locale = locale.substr( 0, locale.indexOf( '-' ) );
			}//end if
	
			// Tweak for Catalan.
			if ( 'ca' === locale ) {
				locale = 'es';
			}//end if
	
			// Set product's name.
			if ( typeof data.display[ locale ] === 'string' ) {
				this.set( 'name', data.display[ locale ] );
			} else {
				this.set( 'name', data.display.en );
			}//end if
	
			// Set long description.
			if ( typeof data.description.full[ locale ] === 'string' ) {
				this.set( 'longDescription', data.description.full[ locale ] );
			} else {
				this.set( 'longDescription', data.description.full.en );
			}//end if
	
			// Set short description.
			if ( typeof data.description.summary[ locale ] === 'string' ) {
				this.set( 'shortDescription', data.description.summary[ locale ] );
			} else {
				this.set( 'shortDescription', data.description.summary.en );
			}//end if
	
			// Set price.
			this.set( 'currency', 'USD' );
			this.set( 'price', data.pricing.price.USD );
	
			// Set period.
			if ( 'year' === data.pricing.interval ) {
				this.set( 'period', 'yearly' );
			} else {
				this.set( 'period', 'monthly' );
			}//end if
	
		}//end parse()
	
	});//end class
	
	

	/**
	 * List of Fastspring products.
	 *
	 * @constructor
	 * @augments NelioContent.collections.Collection
	 *
	 * @author David Aguilera <david.aguilera@neliosoftware.com>
	 * @since 1.0.0
	 */
	NelioContent.collections.FastspringProducts = NelioContent.collections.Collection.extend({
	
		/**
		 * Whether fastspring products have been loaded or not.
		 */
		_isReady: false,
	
		/**
		 * The model we use.
		 */
		model: NelioContent.models.FastspringProduct,
	
		/**
		 * Sorts products so that:
		 *
		 *  * Monthly plans come before annual plans.
		 *  * Personal plans come before team plans.
		 */
		comparator: function( product ) {
	
			var result = '';
	
			if ( 'monthly' === product.get( 'period' ) ) {
				result = '0mon';
			} else {
				result = '1yea';
			}//end if
	
			if ( 'personal' === product.get( 'plan' ) ) {
				result += '0pers';
			} else {
				result += '1team';
			}//end if
	
			return result;
	
		},//end comparator()
	
		/**
		 * Returns whether fastspring products have been loaded or not.
		 *
		 * @return {boolean} whether fastspring products have been loaded or not.
		 *
		 * @since 1.0.0
		 */
		isReady: function() {
	
			return this._isReady;
	
		},//end isReady()
	
		/**
		 * Alias for `reload`.
		 *
		 * @since 1.0.0
		 */
		populate: function() {
	
			this.reload();
	
		},//end reload()
	
		/**
		 * Loads the list of fastspring products from AWS using an AJAX request.
		 *
		 * See API call: /fastspring/producsts
		 *
		 * @since 1.0.0
		 */
		reload: function() {
	
			this._isReady = false;
	
			var collection = this;
			$.ajax({
	
				url: NelioContent.productsUri,
				method: 'GET',
				headers: { Authorization: 'Bearer ' + NelioContent.apiAuthToken },
	
				/**
				 * Filters the list of products and keeps those we're compatible with:
				 *
				 *  * Team and Personal plans, both monthly and yearly.
				 *
				 * @param result {array} the list of Fastspring products.
				 *
				 * @since 1.0.0
				 */
				success: function( result ) {
	
					collection._isReady = true;
					collection.reset( [] );
	
					var personalPlans = [
						'nelio-content-personal-yearly',
						'nelio-content-personal-monthly'
					];
	
					var teamPlans = [
						'nelio-content-team-yearly',
						'nelio-content-team-monthly'
					];
	
					_.each( result, function( data ) {
	
						// Create product.
						var product = new NelioContent.models.FastspringProduct({
							id: data.product
						});
						product.parse( data );
	
						if ( _.contains( personalPlans, product.get( 'id' ) ) ) {
							product.set( 'plan', 'personal' );
							collection.add( product );
						} else if ( _.contains( teamPlans, product.get( 'id' ) ) ) {
							product.set( 'plan', 'team' );
							collection.add( product );
						} else {
							console.log( 'Unknown Product', product.get( 'id' ) );
						}//end if
	
					});
	
					collection.trigger( 'nc:ready' );
	
				},//end success()
	
				/**
				 * Triggers a `nc:error` event, along with the error message.
				 *
				 * @param xhr {object} jqXHR object.
				 *
				 * @since 1.0.0
				 */
				error: function( xhr ) {
	
					collection.trigger( 'nc:error', xhr.responseJSON );
	
				}//end error()
	
			});
	
		}//end reload()
	
	});//end class
	
	

	/**
	 * This class implements a ncselect2 component for selecting users.
	 *
	 * Note this view doesn't have a related model.
	 *
	 * @constructor
	 * @augments Backbone.View
	 *
	 * @since 1.0.0
	 * @author David Aguilera <david.aguilera@neliosoftware.com>
	 */
	NelioContent.views.UserSelector = Backbone.View.extend({
	
		/**
		 * This template is used for rendering a profile in the results list of a
		 * ncselect2 component.
		 */
		_userOptionTemplate: _.template( NelioContent.helpers.trim( document.getElementById( '_nc-user-selector-option' ).innerHTML ) ),
	
		/**
		 * This template is used for rendering the selected profile in a ncselect2
		 * component.
		 */
		_selectedUserTemplate: _.template( NelioContent.helpers.trim( document.getElementById( '_nc-user-selector-selected-option' ).innerHTML ) ),
	
		/**
		 * Whether this view has already been rendered or not.
		 */
		_rendered: false,
	
		/**
		 * User that has to be selected by default.
		 */
		_defaultValue: undefined,
	
		/**
		 * List of valid users.
		 */
		_single: false,
	
		/**
		 * Reference to the user select HTML element.
		 */
		_$select: undefined,
	
		/**
		 * List of events.
		 */
		events: {
			'change .nc-user-selector': '_onUserChange'
		},
	
		/**
		 * Initializes a new instance of this view.
		 *
		 * @param options {array} Optional. List of options for this view, including:
		 *              * `defaultValue`: ID of the user that has to be selected by default.
		 *
		 * @since 1.0.0
		 */
		initialize: function( options ) {
	
			// Default values.
			if ( typeof options === 'undefined' ) {
				options = {};
			}//end if
	
			if ( typeof options.defaultValue !== 'undefined' ) {
				this._defaultValue = options.defaultValue;
			}//end if
	
			if ( typeof options.single === 'boolean' ) {
				this._single = options.single;
			}//end if
	
			// Add listeners.
			this.render = _.bind( this.render, this );
	
		},//end initialize()
	
		/**
		 * Renders this view.
		 *
		 * @return {UserSelector} this instance.
		 *
		 * @since 1.0.0
		 */
		render: function() {
	
			// We make sure that the view is rendered only once.
			if ( this._rendered ) {
				return this;
			} else {
				this._rendered = true;
			}
	
			// This view initializes a ncselect2 component that uses two templates:
			// The first one is used for rendering a profile in the dropdown list.
			var userOptionTemplate = this._userOptionTemplate;
	
			// The second one renders the selected profile (which looks like a select
			// component).
			var selectedUserTemplate = this._selectedUserTemplate;
	
			var arrWithDefaultValue = [];
			if ( typeof this._defaultValue !== 'undefined' ) {
				var defaultValue = NelioContent.users.getUser( this._defaultValue );
				if ( defaultValue.valid() ) {
					arrWithDefaultValue = [ defaultValue.toJSON() ];
				}//end if
			}//end if
	
			// We initialize the ncselect2 component.
			this._$select = jQuery( '<select class="nc-user-selector"></select>' );
			this.$el.html( this._$select );
			this._$select.ncselect2({
	
				data: arrWithDefaultValue,
				dropdownCssClass: 'nc-ncselect2-above-jquery-dialog',
				width: '100%',
	
				// Post information is loaded using AJAX.
				ajax: {
	
					url: ajaxurl,
					dataType: 'json',
					delay: 250,
	
					// Send the params our PHP WordPress callback needs/expects.
					data: function( params ) {
	
						var query = {
							action: 'nelio_content_get_authors',
							term:   params.term,
							page:   params.page
						};
						return query;
	
					},//end data()
	
					// Return the results with the format expected by ncselect2.
					processResults: function( data, params ) {
	
						params.page = params.page || 1;
	
						for ( var i = 0; i < data.items.length; ++i ) {
							NelioContent.users.add( data.items[ i ] );
							data.items[ i ] = NelioContent.users.get( data.items[ i ].id ).toJSON();
						}//end for
	
						return {
							results: data.items,
							pagination: { more : data.more }
						};
	
					},//end processResults()
	
					cache: false
	
				},//end processResults()
	
				templateResult: function( user ) {
	
					if ( typeof user.name === 'undefined' ) {
						return user.text;
					}
					return $( userOptionTemplate( user ) );
	
				},//end templateResult()
	
				templateSelection: function( user ) {
	
					user = NelioContent.users.getUser( user.id ).toJSON();
					return $( selectedUserTemplate( user ) );
	
				}//end templateSelection()
	
			});
			this.setValue( this._defaultValue );
	
			if ( this._single ) {
				this._$select.prop( 'disabled', true );
			}//end if
	
			return this;
	
		},//end render()
	
		/**
		 * Updates the value of the select to the given value.
		 *
		 * @param value {object} The new value of the user.
		 *
		 * @since 1.0.0
		 */
		setValue: function( value ) {
	
			// If someone is setting the value, but the element hasn't been rendered
			// yet, this value will be the "default" value.
			if ( ! this._rendered ) {
				this._defaultValue = value;
				return;
			}//end if
	
			if ( typeof value === 'undefined' ) {
				return;
			}//end if
	
			// Helper function to render the currently selected user.
			var view = this;
			function renderValue() {
				var currentValue = view._$select.val();
				if ( typeof currentValue === 'number' && value !== view._$select.val() ) {
					return;
				}//end if
				var user = NelioContent.users.getUser( value );
				var id = user.get( 'id' );
				var text = user.get( 'name' ) + ' (' + user.get( 'email' ) + ')';
				view.undelegateEvents();
				view._$select.empty().append( '<option value="' + id + '">' + text + '</option>' ).trigger( 'change' );
				view.delegateEvents();
			}//end renderValue()
	
			// Update the currently selected value and try to render the user (if it's already ready).
			this._$select.val( value );
			this.trigger( 'nc:change', value );
			var user = NelioContent.users.getUser( value );
			if ( user.isLoading() ) {
				this.listenToOnce( user, 'nc:load', renderValue );
			} else {
				renderValue();
			}//end if
	
		},//end setValue()
	
		/**
		 * Disables the user selector, so that the user cannot interact with it.
		 *
		 * @since 1.0.0
		 */
		lock: function() {
	
			this._$select.prop( 'disabled', true );
	
		},//end lock()
	
		/**
		 * Enables the user selector, so that the user can interact with it.
		 *
		 * @since 1.0.0
		 */
		unlock: function() {
	
			this._$select.prop( 'disabled', false );
	
		},//end unlock()
	
		/**
		 * Callback function that obtains the selected user and triggers an event with
		 * the new value.
		 *
		 * It triggers the `nc:change` event.
		 *
		 * @param ev {object} The JavaScript event that triggered the callback.
		 *
		 * @since 1.0.0
		 */
		_onUserChange: function( ev ) {
	
			var target = ev.target || ev.srcElement;
			var $el = $( target );
	
			this.trigger( 'nc:change', NelioContent.helpers.trim( $el.val() ) );
	
		},//end _onUserChange()
	
		/**
		 * This function disposes the view, unbinding all events and removing it from the DOM.
		 *
		 * If things work as expected, there should be no memory leaks.
		 *
		 * @since 1.0.0
		 */
		close: function() {
	
			// Destroy ncselect2 component.
			if ( this._rendered ) {
				this._$select.ncselect2( 'destroy' );
			}//end if
	
			// We remove the element from the DOM and unbind all events it was
			// attached to.
			this.stopListening();
			this.unbind();
			if ( typeof this.el !== 'undefined' ) {
				this.remove();
				this.el = undefined;
				this.$el = undefined;
			}//end if
	
		}//end close()
	
	});//class UserSelector
	
	
	/**
	 * This class manages the account page view.
	 *
	 * @constructor
	 * @augments Backbone.View
	 *
	 * @since 1.0.0
	 * @author David Aguilera <david.aguilera@neliosoftware.com>
	 */
	NelioContent.views.AccountPage = Backbone.View.extend({
	
		/**
		 * A reference to a spinner the page contains, so that the user can know when
		 * we're loading stuff.
		 */
		_$spinner: undefined,
	
		/**
		 * License form information.
		 */
		_license: {
			formStatus: 'none',
			newValue: '',
			regex: /^[0-9a-zA-Z$#]{21}$/
		},
	
		/**
		 * Templates for rendering invoices (both the collection and each individual invoice).
		 */
		_invoiceTemplates: {
			table: _.template( NelioContent.helpers.trim( document.getElementById( '_nc-billing' ).innerHTML ) ),
			invoice: _.template( NelioContent.helpers.trim( document.getElementById( '_nc-invoice' ).innerHTML ) )
		},
	
		/**
		 * The subviews managed by this parent view:
		 *
		 *  * `manager`: A user selector view.
		 */
		_views: {
			manager: undefined
		},
	
		/**
		 * The template for rendering this page.
		 */
		template: _.template( NelioContent.helpers.trim( document.getElementById( '_nc-account-page' ).innerHTML ) ),
	
		/**
		 * List of events.
		 */
		events: {
	
			// Updating license.
			'click .nc-use-license-key': '_showUseLicenseKeyForm',
			'click .nc-hide-license-form': '_hideUseLicenseKeyForm',
			'click .nc-validate-license': '_validateLicense',
	
			'keyup input.nc-license-key': '_maybeEnableValidateLicenseButton',
			'change input.nc-license-key': '_maybeEnableValidateLicenseButton',
	
			// Subscribing.
			'click .nc-subscribe': '_maybeSubscribe',
	
			// Upgrading.
			'click .nc-upgrade': '_maybeUpgradeSubscription',
	
			// Cancelling.
			'click .nc-cancel-subscription': '_maybeCancelSubscription',
	
		},
	
		/**
		 * Initializes a new instance of this view.
		 *
		 * @param options {object} Additional options.
		 *
		 * @since 1.0.0
		 */
		initialize: function( options ) {
	
			// Load default options.
			if ( typeof options === 'undefined' ) {
				options = {};
			}//end if
			this._$spinner = options.spinner;
	
			// Prepare some bindings.
			this.render = _.bind( this.render, this );
	
			// Add listeners.
			this.listenTo( this, 'nc:render', this.render );
			this.listenTo( this.model, 'change:isLoading', this.render );
			this.listenTo( this.model, 'change:invoices', this.render );
	
			// Create child views.
			this._views.manager = new NelioContent.views.UserSelector({
				defaultValue: this.model.get( 'managerId' )
			});
			this.listenTo( this._views.manager, 'nc:change', this._onManagerChange );
	
			var view = this;
			this.listenTo( this.model, 'change:managerId', function( model ) {
				view.stopListening( view._views.manager, 'nc:change' )
				view._views.manager.render().setValue( model.get( 'managerId' ) );
				view.listenTo( view._views.manager, 'nc:change', view._onManagerChange );
			});
	
		},//end initialize()
	
		/**
		 * Renders this view.
		 *
		 * @return {AccountPage} this instance.
		 *
		 * @since 1.0.0
		 */
		render: function() {
	
			// Detach old views.
			this._views.manager.$el.detach();
	
			// SAVE GUARDS
			// If we're loading, leave.
			if ( this.model.get( 'isLoading' ) ) {
				this.el.innerHTML = '';
				return this;
			}//end if
	
			// If something went wrong, tell the user.
			if ( this.model.get( 'error' ) ) {
				this.el.innerHTML = '<span class="nc-dashicons nc-dashicons-warning"></span> ' + _.escape( this.model.get( 'error' ) );
				if ( typeof this._$spinner !== 'undefined' ) {
					this._$spinner.hide();
				}//end if
				return this;
			}//end if
	
			// REGULAR RENDERING PROCESS.
			var json = this.model.toJSON();
	
			var creationDate = this.model.get( 'creationDate' );
			json.creationDateFormatted = creationDate.format( NelioContent.i18n.date.creationDate );
	
			var nextChargeDate = this.model.get( 'nextChargeDate' );
			json.endDateFormatted = nextChargeDate.format( NelioContent.i18n.date.cancelDateText );
	
			json.nextRenewalDateFormatted = nextChargeDate.format( NelioContent.i18n.date.nextChargeDate );
	
			json.modifyLicenseKeyStatus = this._license.formStatus;
			json.newLicenseKey = this._license.newValue;
	
			this.el.innerHTML = this.template( json );
	
			if ( typeof this._$spinner !== 'undefined' ) {
	
				if ( this.model.get( 'isLoading' ) ) {
					this._$spinner.show();
				} else {
					this._$spinner.hide();
				}//end if
	
			}//end if
	
			// Render invoices, if any.
			var invoices = this.model.get( 'invoices' );
			if ( this.model.get( 'errorLoadingInvoices' ) ) {
	
				this.$( '#nc-billing-table' ).html( NelioContent.i18n.errors.api.cantGetInvoices );
	
			} else if ( typeof invoices === 'object' ) {
	
				if ( invoices.length > 0 ) {
	
					var view = this;
					var $table = $( this._invoiceTemplates.table() );
					this.$( '#nc-billing-table' ).html( $table );
					_.each( invoices, function( invoice ) {
						$table.append( view._invoiceTemplates.invoice( invoice ) );
					});
	
				} else {
	
					this.$( '#nc-billing-table' ).html( NelioContent.i18n.noInvoices );
	
				}//end if
	
			}//end if
	
			if ( ! this._license.regex.test( this._license.newValue ) ) {
				this.$( '.nc-validate-license' ).prop( 'disabled', true );
			}//end if
	
			// Render child views.
			this.$( '.nc-manager-placeholder' ).html( this._views.manager.render().el );
			this._views.manager.$el.trigger( 'change' );
	
			return this;
	
		},//end render()
	
		/**
		 * Shows the form for inputting a license key.
		 *
		 * @since 1.0.0
		 */
		_showUseLicenseKeyForm: function() {
	
			this._license.newValue = '';
			this._license.formStatus = 'visible-form';
			this.trigger( 'nc:render' );
	
		},//end _showUseLicenseKeyForm()
	
		/**
		 * Hides the form for using a license key.
		 *
		 * @since 1.0.0
		 */
		_hideUseLicenseKeyForm: function() {
	
			this._license.newValue = '';
			this._license.formStatus = 'none';
			this.trigger( 'nc:render' );
	
		},//end _hideUseLicenseKeyForm()
	
		/**
		 * Validates the license using an AJAX request.
		 *
		 * @since 1.0.0
		 */
		_validateLicense: function() {
	
			this._license.formStatus = 'validating';
			this.trigger( 'nc:render' );
	
			var view = this;
			$.ajax({
	
				url: ajaxurl,
				data: {
					action: 'nelio_content_use_license',
					license: NelioContent.helpers.trim( this._license.newValue )
				},
	
				/**
				 * Callback function for a valid license that updates the current account
				 * information.
				 *
				 * @param account {object} new account information.
				 *
				 * @since 1.0.0
				 */
				success: function( account ) {
	
					view._license.newValue = '';
					view._license.formStatus = 'none';
					view.model.set( account );
					view.model.resetInvoices();
					view.trigger( 'nc:render' );
	
				},//end success()
	
				/**
				 * Callback function invoked when there was an issue with the license.
				 *
				 * @param xhr {object} jqXHR object.
				 *
				 * @since 1.0.0
				 */
				error: function( xhr ) {
	
					NelioContent.helpers.openErrorDialog( xhr.responseJSON );
					view._license.formStatus = 'form';
					view.trigger( 'nc:render' );
	
				}//end success()
	
			});
	
		},//end _validateLicense()
	
		/**
		 * Callback function that enables the validate buton if the license key
		 * "looks good" and disables it otherwise.
		 *
		 * @since 1.0.0
		 */
		_maybeEnableValidateLicenseButton: function() {
	
			// Recover the new value.
			this._license.newValue = this.$( 'input.nc-license-key' ).val();
	
			// Enable/disable the button.
			this.$( '.nc-validate-license' ).prop( 'disabled', ! this._license.regex.test( this._license.newValue ) );
	
		},//end _maybeEnableValidateLicenseButton()
	
		/**
		 * Opens a subscribe dialog.
		 *
		 * @since 1.0.0
		 */
		_maybeSubscribe: function() {
	
			var view = this;
			var dialog = new NelioContent.views.SubscribeDialog();
	
			this.listenTo( dialog, 'nc:close', function() {
				view.stopListening( dialog );
			});
	
			dialog.render();
	
		},//end _maybeSubscribe()
	
		/**
		 * Opens an upgrade dialog.
		 *
		 * @since 1.0.0
		 */
		_maybeUpgradeSubscription: function() {
	
			var view = this;
			var dialog = new NelioContent.views.UpgradeDialog({
				model: this.model
			});
	
			this.listenTo( dialog, 'nc:upgrade', function( account ) {
				view.model.set( account );
				view.model.resetInvoices();
				view.trigger( 'nc:render' );
			});
	
			this.listenTo( dialog, 'nc:close', function() {
				view.stopListening( dialog );
			});
	
			dialog.render();
	
		},//end _maybeUpgradeSubscription()
	
		/**
		 * Opens a dialog for canceling the subscription.
		 *
		 * @since 1.0.0
		 */
		_maybeCancelSubscription: function() {
	
			var date = this.model.get( 'nextChargeDate' ).format( NelioContent.i18n.date.cancelDateDialog );
	
			var view = this;
			var $el = NelioContent.helpers.openDeletionConfirmationDialog(
				NelioContent.i18n.titles.cancelSubscription,
				NelioContent.i18n.dialogs.cancelSubscription.replace( '{date}', _.escape( date ) ),
				NelioContent.i18n.actions.cancelSubscription,
				function() {
	
					var buttons = $el.parent().find( 'button' );
					var cancelButton = $el.parent().find( '.nc-super-delete-button' );
					buttons.prop( 'disabled', true );
					cancelButton.html( NelioContent.i18n.feedback.cancelingSubscription );
					$el.dialog( 'option', 'closeOnEscape', false );
	
					$.ajax({
	
						url: ajaxurl,
						data: {
							action: 'nelio_content_cancel_subscription'
						},
	
						/**
						 * Updates the account information after successfully canceling the account.
						 *
						 * @param account {object} new account information.
						 *
						 * @since 1.0.0
						 */
						success: function( account ) {
	
							view.model.set( account );
							view.model.resetInvoices();
							view.trigger( 'nc:render' );
							$el.dialog( 'close' );
	
						},//end success()
	
						/**
						 * Callback function invoked when there was an issue during the cancelation process.
						 *
						 * @param xhr {object} jqXHR object.
						 *
						 * @since 1.0.0
						 */
						error: function( xhr ) {
	
							$el.dialog( 'close' );
							NelioContent.helpers.openErrorDialog( xhr.responseJSON );
	
						}//end error()
	
					});
	
				}//end onConfirm()
			);
	
			var buttons = $el.dialog( 'option', 'buttons' );
			buttons[0].text = NelioContent.i18n.actions.close;
			$el.dialog( 'option', 'buttons', buttons );
			$el.parent().find( '.nc-cancel-button' ).focus();
	
		},//end _maybeCancelSubscription()
	
		/**
		 * Modifies the manager to the given value.
		 *
		 * @param managerId {integer} The ID of the selected user.
		 *
		 * @since 1.0.0
		 */
		_onManagerChange: function( managerId ) {
	
			this._$spinner.show();
			this.$( 'button' ).prop( 'disabled', true );
			this.$( 'input' ).prop( 'disabled', true );
			this._views.manager.lock();
	
			$.ajax({
	
				url: ajaxurl,
				data: {
					action: 'nelio_content_change_manager',
					manager: managerId
				},
	
				/**
				 * Reload the page if the manager was successfully changed.
				 *
				 * @since 1.0.0
				 */
				success: function() {
					window.location.reload();
				},//end success()
	
				/**
				 * Reload the page if the manager couldn't be changed. This way,
				 * the old manager will be loaded again and the user will see it.
				 *
				 * @since 1.0.0
				 */
				error: function() {
					window.location.reload();
				}//end error()
	
			});
	
		},//end _onAssigneeChange()
	
		/**
		 * This function disposes the view, unbinding all events and removing it from the DOM.
		 *
		 * If things work as expected, there should be no memory leaks.
		 *
		 * @since 1.0.0
		 */
		close: function() {
	
			// Remove child views.
			for ( var viewName in this._views ) {
	
				if ( this._views.hasOwnProperty( viewName ) ) {
	
					var view = this._views[ viewName ];
					if ( typeof view === 'object' ) {
						view.close();
					}//end if
	
				}//end if
	
			}//end for
	
			// We remove the element from the DOM and unbind all events it was
			// attached to.
			this.stopListening();
			this.unbind();
			if ( typeof this.el !== 'undefined' ) {
				this.remove();
				this.el = undefined;
				this.$el = undefined;
			}//end if
	
		}//end close()
	
	});//class AccountPage
	
	
	/**
	 * A dialog for upgrading the current subscription.
	 *
	 * @constructor
	 * @augments Backbone.View
	 *
	 * @since 1.0.0
	 * @author David Aguilera <david.aguilera@neliosoftware.com>
	 */
	NelioContent.views.UpgradeDialog = Backbone.View.extend({
	
		/**
		 * A reference to the save button in the dialog.
		 */
		_$saveButton: undefined,
	
		/**
		 * List of Fastspring products.
		 */
		_products: undefined,
	
		/**
		 * The underscore template for an individual plan.
		 */
		_productTemplate: _.template( NelioContent.helpers.trim( document.getElementById( '_nc-fastspring-product' ).innerHTML ) ),
	
		/**
		 * The underscore template for an individual plan.
		 */
		_selectedProduct: undefined,
	
		/**
		 * The underscore template.
		 */
		template: _.template( NelioContent.helpers.trim( document.getElementById( '_nc-upgrade-dialog' ).innerHTML ) ),
	
		/**
		 * List of events and their callbacks.
		 */
		events: {
	
			'change .nc-fastspring-product': '_onProductChange',
			'click .nc-fastspring-product': '_onProductChange'
	
		},
	
		/**
		 * Initializes a new instance of this view.
		 *
		 * @since 1.0.0
		 */
		initialize: function() {
	
			// Populate the products list.
			this._products = new NelioContent.collections.FastspringProducts();
			this._products.populate();
	
			// Add some bindings.
			this.render = _.bind( this.render, this );
			this._onDialogSave = _.bind( this._onDialogSave, this );
			this._onDialogCancel = _.bind( this._onDialogCancel, this );
	
			// Listen to relevant events.
			this.listenTo( this, 'nc:render', this.render );
			this.listenTo( this._products, 'nc:ready', this.render );
			this.listenTo( this._products, 'nc:error', this._unableToLoadProducts );
	
			// Convert to dialog.
			this._convertToDialog();
	
		},//end initialize()
	
		/**
		 * Opens the dialog and renders this view just one time. If the function is
		 * called again and the view was already rendered, old HTML content is
		 * returned.
		 *
		 * @return {SocialMessageActualEditor} this instance.
		 *
		 * @since 1.0.0
		 */
		render: function() {
	
			var json = {};
			json.areProductsReady = this._products.isReady();
			json.noProductsAvailable = this._products.isReady() && 0 === this._products.length;
	
			this.el.innerHTML = this.template( json );
			this.$el.dialog( 'open' );
	
			if ( this._products.isReady() ) {
	
				var $container = this.$( '.nc-plans' );
				var productTemplate = this._productTemplate;
				var view = this;
				this._products.each( function( product ) {
	
					if ( ! product.canBeUpgradedFrom( view.model ) ) {
						return;
					}//end if
					$container.append( productTemplate( product.toJSON() ) );
	
				});
	
			}//end if
	
			this._maybeEnableSaveButton();
	
			return this;
	
		},//end render()
	
		/**
		 * Locks all inputs, so that the user cannot interact with the view
		 * (presumably, whilst saving).
		 *
		 * @since 1.0.0
		 */
		_lock: function() {
	
			this.$( '*' ).attr( 'disabled', 'disabled' );
			this.$el.addClass( 'nc-locked' );
	
		},//end _lock()
	
		/**
		 * Converts this view in a jQuery dialog.
		 *
		 * @since 1.0.0
		 */
		_convertToDialog: function() {
	
			// Create buttons.
			var buttons = [];
			buttons.push(
				NelioContent.helpers.makeDialogCancelButton( this, NelioContent.i18n.actions.close )
			);
			buttons.push(
				NelioContent.helpers.makeDialogSaveButton( this, NelioContent.i18n.actions.upgrade )
			);
	
			// Prepare the dialog.
			var view = this;
			this.$el.dialog({
	
				title: NelioContent.i18n.titles.upgradeSubscription,
				buttons: buttons,
				modal: true,
				width: Math.min( 600, NelioContent.helpers.getWindowWidth() - 20 ),
	
				position: {
					my: 'center top',
					at: 'center top+80'
				},
	
				/**
				 * Opens the dialog and listens to the events triggered by its buttons.
				 *
				 * @since 1.0.0
				 */
				open: function() {
	
					// Listen to dialog button events.
					view.listenTo( view, 'nc:click:dialog:save', view._onDialogSave );
					view.listenTo( view, 'nc:click:dialog:cancel', view._onDialogCancel );
	
					view._$saveButton = view.$el.parent().find( 'button.nc-save-button' );
					view._$saveButton.prop( 'disabled', true );
	
				},//end open()
	
				/**
				 * Destroys the dialog and triggers the `nc:close:dialog` event.
				 *
				 * @since 1.0.0
				 */
				close: function( event, ui ) {
	
					// Stop listening to dialog buttons, now that the dialog is about to be closed.
					view.stopListening( view, 'nc:click:dialog:save', view._onDialogSave );
					view.stopListening( view, 'nc:click:dialog:cancel', view._onDialogCancel );
	
					// If necessary, destroy the dialog.
					view.trigger( 'nc:close:dialog' );
	
				}//end open()
	
			});
	
		},//end _convertToDialog()
	
		/**
		 * A callback function that enables or disables the save post button,
		 * depending on whether the model can be saved or not.
		 *
		 * @since 1.0.0
		 */
		_maybeEnableSaveButton: function() {
	
			if ( typeof this._$saveButton === 'undefined' ) {
				return;
			}//end if
	
			this._$saveButton.prop( 'disabled', typeof this._selectedProduct === 'undefined' );
	
		},//end _maybeEnableSaveButton()
	
		/**
		 * Callback function that updates the currently-selected product.
		 *
		 * @param ev {object} The JavaScript event that triggered the callback.
		 *
		 * @since 1.0.0
		 */
		_onProductChange: function( ev ) {
	
			var target = ev.target || ev.srcElement;
			var $input = $( target ).closest( '.nc-fastspring-product' ).find( 'input' );
	
			$input.attr( 'checked', true );
			this._selectedProduct = $input.val();
			this._maybeEnableSaveButton();
	
		},//end _onProductChange()
	
		/**
		 * Callback function that performs an AJAX request for upgrading the
		 * subscription.
		 *
		 * @since 1.0.0
		 */
		_onDialogSave: function() {
	
			var $dialog = this.$el.parent();
			var $okButton = $dialog.find( '.ui-dialog-buttonpane button.button-primary' );
			var $otherButtons = $dialog.find( '.ui-dialog-titlebar button, .ui-dialog-buttonpane button:not( .button-primary )' );
	
			if ( $okButton.hasClass( 'button-disabled' ) ) {
				return;
			}//end if
	
			this._lock();
			this.$el.dialog( 'option', 'closeOnEscape', false );
			$okButton.prop( 'disabled', true );
			$otherButtons.prop( 'disabled', true );
			$okButton.html( NelioContent.i18n.feedback.upgrading );
	
			var view = this;
			$.ajax({
	
				url: ajaxurl,
				data: {
					action: 'nelio_content_upgrade',
					product: this._selectedProduct
				},
	
				/**
				 * Updates the account with the new information.
				 *
				 * @param account {object} Updates the account with the new information.
				 *
				 * @since 1.0.0
				 */
				success: function( account ) {
	
					view.trigger( 'nc:upgrade', account );
					view.$el.dialog( 'close' );
	
				},//end success()
	
				/**
				 * Closes the dialog and notifies the user that something went wrong.
				 *
				 * @param xhr {object} jqXHR object.
				 *
				 * @since 1.0.0
				 */
				error: function( xhr ) {
	
					view.$el.dialog( 'close' );
					NelioContent.helpers.openErrorDialog( xhr.responseJSON );
	
				}//end error()
	
			});
	
		},//end _onDialogSave()
	
		/**
		 * Callback function that closes the current dialog and discards all changes.
		 *
		 * @since 1.0.0
		 */
		_onDialogCancel: function() {
	
			this.$el.dialog( 'close' );
	
		},//end _onDialogCancel()
	
		/**
		 * Callback function tells the user that we weren't able to load the list of
		 * fastspring prodcuts.
		 *
		 * @param message {string} Error message.
		 *
		 * @since 1.0.0
		 */
		_unableToLoadProducts: function( message ) {
	
			// Close this view.
			this.$el.dialog( 'close' );
			this.close();
	
			// Show error message.
			var error = NelioContent.i18n.errors.api.cantGetProducts;
			message = message.replace( '/\.$/', '' );
			error = error.replace( '{error}', message );
			NelioContent.helpers.openErrorDialog( error );
	
		},//end _unableToLoadProducts()
	
		/**
		 * This function disposes the view, unbinding all events and removing it from the DOM.
		 *
		 * If things work as expected, there should be no memory leaks.
		 *
		 * @since 1.0.0
		 */
		close: function() {
	
			// We remove the element from the DOM and unbind all events it was
			// attached to.
			this.stopListening();
			this.unbind();
			if ( typeof this.el !== 'undefined' ) {
				this.remove();
				this.el = undefined;
				this.$el = undefined;
			}//end if
	
		}//end close()
	
	});//class UpgradeDialog
	
	
	/**
	 * A dialog for subscribing for (maybe) the first time.
	 *
	 * @constructor
	 * @augments Backbone.View
	 *
	 * @since 1.0.0
	 * @author David Aguilera <david.aguilera@neliosoftware.com>
	 */
	NelioContent.views.SubscribeDialog = Backbone.View.extend({
	
		/**
		 * A reference to the save button in the dialog.
		 */
		_$saveButton: undefined,
	
		/**
		 * List of Fastspring products.
		 */
		_products: undefined,
	
		/**
		 * The underscore template for an individual plan.
		 */
		_productTemplate: _.template( NelioContent.helpers.trim( document.getElementById( '_nc-fastspring-product' ).innerHTML ) ),
	
		/**
		 * The underscore template for an individual plan.
		 */
		_selectedProduct: undefined,
	
		/**
		 * The underscore template.
		 */
		template: _.template( NelioContent.helpers.trim( document.getElementById( '_nc-subscribe-dialog' ).innerHTML ) ),
	
		/**
		 * List of events and their callbacks.
		 */
		events: {
	
			'change .nc-fastspring-product': '_onProductChange',
			'click .nc-fastspring-product': '_onProductChange'
	
		},
	
		/**
		 * Initializes a new instance of this view.
		 *
		 * @since 1.0.0
		 */
		initialize: function() {
	
			// Populate the products list.
			this._products = new NelioContent.collections.FastspringProducts();
			this._products.populate();
	
			// Add some bindings.
			this.render = _.bind( this.render, this );
			this._onDialogSave = _.bind( this._onDialogSave, this );
			this._onDialogCancel = _.bind( this._onDialogCancel, this );
	
			// Listen to relevant events.
			this.listenTo( this, 'nc:render', this.render );
			this.listenTo( this._products, 'nc:ready', this.render );
			this.listenTo( this._products, 'nc:error', this._unableToLoadProducts );
	
			// Convert to dialog.
			this._convertToDialog();
	
		},//end initialize()
	
		/**
		 * Opens the dialog and renders this view just one time. If the function is
		 * called again and the view was already rendered, old HTML content is
		 * returned.
		 *
		 * @return {SocialMessageActualEditor} this instance.
		 *
		 * @since 1.0.0
		 */
		render: function() {
	
			var json = {};
			json.areProductsReady = this._products.isReady();
			json.noProductsAvailable = this._products.isReady() && 0 === this._products.length;
	
			this.el.innerHTML = this.template( json );
			this.$el.dialog( 'open' );
	
			if ( this._products.isReady() ) {
	
				var $container = this.$( '.nc-plans' );
				var productTemplate = this._productTemplate;
				var view = this;
				this._products.each( function( product ) {
					$container.append( productTemplate( product.toJSON() ) );
				});
	
			}//end if
	
			this._maybeEnableSaveButton();
	
			return this;
	
		},//end render()
	
		/**
		 * Locks all inputs, so that the user cannot interact with the view
		 * (presumably, whilst saving).
		 *
		 * @since 1.0.0
		 */
		_lock: function() {
	
			this.$( '*' ).attr( 'disabled', 'disabled' );
			this.$el.addClass( 'nc-locked' );
	
		},//end _lock()
	
		/**
		 * Converts this view in a jQuery dialog.
		 *
		 * @since 1.0.0
		 */
		_convertToDialog: function() {
	
			// Create buttons.
			var buttons = [];
			buttons.push(
				NelioContent.helpers.makeDialogCancelButton( this, NelioContent.i18n.actions.close )
			);
			buttons.push(
				NelioContent.helpers.makeDialogSaveButton( this, NelioContent.i18n.actions.subscribe )
			);
	
			// Prepare the dialog.
			var view = this;
			this.$el.dialog({
	
				title: NelioContent.i18n.titles.subscribe,
				buttons: buttons,
				modal: true,
				width: Math.min( 600, NelioContent.helpers.getWindowWidth() - 20 ),
	
				position: {
					my: 'center top',
					at: 'center top+80'
				},
	
				/**
				 * Opens the dialog and listens to the events triggered by its buttons.
				 *
				 * @since 1.0.0
				 */
				open: function() {
	
					// Listen to dialog button events.
					view.listenTo( view, 'nc:click:dialog:save', view._onDialogSave );
					view.listenTo( view, 'nc:click:dialog:cancel', view._onDialogCancel );
	
					view._$saveButton = view.$el.parent().find( 'button.nc-save-button' );
					view._$saveButton.prop( 'disabled', true );
	
				},//end open()
	
				/**
				 * Destroys the dialog and triggers the `nc:close:dialog` event.
				 *
				 * @since 1.0.0
				 */
				close: function( event, ui ) {
	
					// Stop listening to dialog buttons, now that the dialog is about to be closed.
					view.stopListening( view, 'nc:click:dialog:save', view._onDialogSave );
					view.stopListening( view, 'nc:click:dialog:cancel', view._onDialogCancel );
	
					// If necessary, destroy the dialog.
					view.trigger( 'nc:close:dialog' );
	
				}//end open()
	
			});
	
		},//end _convertToDialog()
	
		/**
		 * A callback function that enables or disables the save post button,
		 * depending on whether the model can be saved or not.
		 *
		 * @since 1.0.0
		 */
		_maybeEnableSaveButton: function() {
	
			if ( typeof this._$saveButton === 'undefined' ) {
				return;
			}//end if
	
			this._$saveButton.prop( 'disabled', typeof this._selectedProduct === 'undefined' );
	
		},//end _maybeEnableSaveButton()
	
		/**
		 * Callback function that updates the currently-selected product.
		 *
		 * @param ev {object} The JavaScript event that triggered the callback.
		 *
		 * @since 1.0.0
		 */
		_onProductChange: function( ev ) {
	
			var target = ev.target || ev.srcElement;
			var $input = $( target ).closest( '.nc-fastspring-product' ).find( 'input' );
	
			$input.attr( 'checked', true );
			this._selectedProduct = $input.val();
			this._maybeEnableSaveButton();
	
		},//end _onProductChange()
	
		/**
		 * Callback function that sends the user to Nelio Software's subscription page.
		 *
		 * @since 1.0.0
		 */
		_onDialogSave: function() {
	
			window.location.href = NelioContent.pages.subscriptionAtNelio.replace( '{plan}', this._selectedProduct );
	
		},//end _onDialogSave()
	
		/**
		 * Callback function that closes the current dialog and discards all changes.
		 *
		 * @since 1.0.0
		 */
		_onDialogCancel: function() {
	
			this.$el.dialog( 'close' );
	
		},//end _onDialogCancel()
	
		/**
		 * Callback function tells the user that we weren't able to load the list of
		 * fastspring prodcuts.
		 *
		 * @param message {string} Error message.
		 *
		 * @since 1.0.0
		 */
		_unableToLoadProducts: function( message ) {
	
			// Close this view.
			this.$el.dialog( 'close' );
			this.close();
	
			// Show error message.
			var error = NelioContent.i18n.errors.api.cantGetProducts;
			message = message.replace( /\.$/, '' );
			error = error.replace( '{error}', message );
			NelioContent.helpers.openErrorDialog( error );
	
		},//end _unableToLoadProducts()
	
		/**
		 * This function disposes the view, unbinding all events and removing it from the DOM.
		 *
		 * If things work as expected, there should be no memory leaks.
		 *
		 * @since 1.0.0
		 */
		close: function() {
	
			// We remove the element from the DOM and unbind all events it was
			// attached to.
			this.stopListening();
			this.unbind();
			if ( typeof this.el !== 'undefined' ) {
				this.remove();
				this.el = undefined;
				this.$el = undefined;
			}//end if
	
		}//end close()
	
	});//class SubscribeDialog
	
	

	var view = new NelioContent.views.AccountPage({
		el: $( '.nc-billing-page-container' ),
		spinner: $( '.nc-billing-page h2 .spinner' ),
		model: new NelioContent.models.Account()
	});
	view.model.load();
	view.render();

})( jQuery );
